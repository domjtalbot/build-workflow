# Note when using act:
# Some services &/ steps require adjusting to test locally using `act`.
# To check for `act` use this in an if: `github.actor != 'nektos/act'`

name: Release

on:
  push:
    branches:
      - development
      - main
      - master
      - staging

jobs:
    debug-context:
      runs-on: ubuntu-latest

      steps:
        - name: Github Context
          run: |
            echo "${{ toJson(github) }}"

    # Setup the dependencies used by all jobs.
    # This job is reponsible for installing and caching npm
    # dependencies, which are then used by other jobs.
    # All jobs then use the same source of truth for `node_modules`,
    # minimizing risk of failure from setup steps.
    setup:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [15.x]

        steps:
            # Checkout codebase triggered by commit
            - name: Checkout Codebase
              uses: actions/checkout@v2

            # Get node cache for the specific `package-lock.json`.
            # If the cache doesn't exist use another cache using
            # the restore key, to help speed up the npm install process.
            - id: node-cache
              if: github.actor != 'nektos/act'
              name: Cache Node Dependencies
              uses: actions/cache@v2
              with:
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  path: |
                      ~/.npm
                      node_modules
                      */*/node_modules
                  restore-keys: |
                      ${{ runner.os }}-node-

            # Node is only required in this job, if `npm install`
            # needs to be run, which in turn is only run if no
            # cache exists for specifc `package-lock.json`.
            - if: steps.node-cache.outputs.cache-hit != 'true'
              name: Setup Node.js v${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}

            # Only install node dependencies if cache for the
            # specific `package-lock.json` didn't exist.
            - if: ${{ steps.node-cache.outputs.cache-hit != 'true' || github.actor == 'nektos/act' }}
              name: Install Node Dependencies
              run: npm install

            # Only used when testing workflow with `act`.
            # postinstall` doesn't trigger after `npm install` when
            # testing the workflow via `act`. This forces the task to run. 
            - if: ${{ steps.node-cache.outputs.cache-hit != 'true' }}
              name: Node Postinstall
              run: npm run postinstall

    lint:
        # Wait for other jobs to complete before running this job.
        needs: [setup]

        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [15.x]

        steps:
            # Checkout codebase triggered by commit
            - name: Checkout
              uses: actions/checkout@v2

            # Get node cache for the specific `package-lock.json`.
            - id: node-cache
              if: github.actor != 'nektos/act'
              name: Cache Node Dependencies
              uses: actions/cache@v2
              with:
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  path: |
                      ~/.npm
                      node_modules
                      */*/node_modules
                  restore-keys: |
                      ${{ runner.os }}-node-

            # Install Node as it is required by the job.
            - name: Setup Node.js v${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}

            # Only install node dependencies if cache for the
            # specific `package-lock.json` didn't exist.
            - if: ${{ steps.node-cache.outputs.cache-hit != 'true' || github.actor == 'nektos/act' }}
              name: Install Node Dependencies
              run: npm install

            # Only used when testing workflow with `act`.
            # postinstall` doesn't trigger after `npm install` when
            # testing the workflow via `act`. This forces the task to run. 
            - if: ${{ steps.node-cache.outputs.cache-hit != 'true' }}
              name: Node Postinstall
              run: npm run postinstall

            - name: Lint
              run: npm run lint

    test:
        # Wait for jobs to complete before running this job.
        needs: [setup]
        
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [15.x]

        steps:
            # Checkout codebase triggered by commit
            - name: Checkout
              uses: actions/checkout@v2

            # Get node cache for the specific `package-lock.json`.
            - id: node-cache
              if: github.actor != 'nektos/act'
              name: Cache Node Dependencies
              uses: actions/cache@v2
              with:
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  path: |
                      ~/.npm
                      node_modules
                      */*/node_modules
                  restore-keys: |
                      ${{ runner.os }}-node-

            # Install Node as it is required by the job.
            - name: Setup Node.js v${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}

            # Only install node dependencies if cache for the
            # specific `package-lock.json` didn't exist.
            - if: ${{ steps.node-cache.outputs.cache-hit != 'true' || github.actor == 'nektos/act' }}
              name: Install Node Dependencies
              run: npm install

            # Only used when testing workflow with `act`.
            # postinstall` doesn't trigger after `npm install` when
            # testing the workflow via `act`. This forces the task to run. 
            - if: ${{ steps.node-cache.outputs.cache-hit != 'true' }}
              name: Node Postinstall
              run: npm run postinstall

            - name: Test
              run: npm run test

    release:
        if: github.action != 'nektos/act'
        # Wait for jobs to complete before running this job.
        needs: [lint, test]
        
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [15.x]

        steps:
            # Checkout codebase triggered by commit
            - name: Checkout
              uses: actions/checkout@v2

            # Get node cache for the specific `package-lock.json`.
            - id: node-cache
              if: github.actor != 'nektos/act'
              name: Cache Node Dependencies
              uses: actions/cache@v2
              with:
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  path: |
                      ~/.npm
                      node_modules
                      */*/node_modules
                  restore-keys: |
                      ${{ runner.os }}-node-

            # Install Node as it is required by the job.
            - name: Setup Node.js v${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}

            # Only install node dependencies if cache for the
            # specific `package-lock.json` didn't exist.
            - if: ${{ steps.node-cache.outputs.cache-hit != 'true' || github.actor == 'nektos/act' }}
              name: Install Node Dependencies
              run: npm install

            # Only used when testing workflow with `act`.
            # postinstall` doesn't trigger after `npm install` when
            # testing the workflow via `act`. This forces the task to run. 
            - if: ${{ steps.node-cache.outputs.cache-hit != 'true' }}
              name: Node Postinstall
              run: npm run postinstall

            - if: ${{ contains(github.ref, 'development') }}
              name: Alpha Release
              run: npm run version:alpha
            
            - if: ${{ contains(github.ref, 'staging') }}
              name: Beta Release
              run: npm run version:beta

            - if: ${{ contains(github.ref, 'main') }}
              name: Production Release
              run: npm run version
